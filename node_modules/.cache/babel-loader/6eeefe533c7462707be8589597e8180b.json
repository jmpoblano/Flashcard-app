{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ultra\\\\Desktop\\\\Thinkful\\\\flashcard-app-pro\\\\Project_Flashcards_Qualified_1\\\\src\\\\Decks\\\\DeckRouter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Route, Switch, useRouteMatch, useParams, useHistory } from \"react-router-dom\";\nimport DeckView from \"./DeckView/DeckView\";\nimport { readDeck, updateDeck, deleteDeck, listCards, deleteCard } from \"../utils/api/index\";\nimport EditDeck from \"../Cards/CardsRouter\";\nimport CardsRouter from \"../Cards/CardsRouter\";\nimport Study from \"./Study/Study\";\nimport BreadcrumbNav from \"../Common/BreadcrumbNav\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DeckRouter({\n  decks,\n  deleteDeckHandler\n}) {\n  _s();\n\n  console.log(deleteDeckHandler);\n  const {\n    url\n  } = useRouteMatch();\n  const initialDeck = {\n    name: \"Sample\",\n    description: \"Sample\",\n    cards: []\n  };\n  const [deck, setDeck] = useState({ ...initialDeck\n  });\n  const navigations = [[{\n    name: \"Home\",\n    route: \"/\"\n  }, {\n    name: deck.name\n  }], [{\n    name: \"Home\",\n    route: \"/\"\n  }, {\n    name: deck.name,\n    route: url\n  }, {\n    name: \"Study\"\n  }], [{\n    name: \"Home\",\n    route: \"/\"\n  }, {\n    name: deck.name,\n    route: `/decks/${deck.id}`\n  }, {\n    name: \"Edit Deck\"\n  }]];\n  const {\n    deckId\n  } = useParams();\n  const history = useHistory();\n  useEffect(() => {\n    setDeck({ ...initialDeck\n    });\n    const abortController = new AbortController();\n\n    async function loadDeck() {\n      try {\n        const deckFromAPI = await readDeck(deckId, abortController.signal);\n        setDeck({ ...deckFromAPI\n        });\n        return deckFromAPI;\n      } catch (err) {\n        if (err.name !== \"AbortError\") {\n          throw err;\n        }\n      }\n    }\n\n    loadDeck();\n    return () => abortController.abort();\n  }, [deckId]);\n\n  const editDeckHandle = async updatedDeck => {\n    const {\n      newName,\n      newDescription\n    } = await updateDeck(updatedDeck);\n    console.log(newName, newDescription);\n    history.push(url);\n  };\n\n  const deleteCardHandle = async cardId => {\n    const reply = window.confirm(\"Are you sure you want to delete this card?\");\n\n    if (reply) {\n      await deleteCard(cardId);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: url,\n      children: [/*#__PURE__*/_jsxDEV(BreadcrumbNav, {\n        namesRoutes: navigations[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DeckView, {\n        deck: deck,\n        deleteDeckHandle: deleteDeckHandle,\n        deleteCardHandle: deleteCardHandle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${url}/study`,\n      children: [/*#__PURE__*/_jsxDEV(BreadcrumbNav, {\n        namesRoutes: navigations[2]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(EditDeck, {\n        deck: deck,\n        update: editDeckHandle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: `${url}/cards`,\n      children: /*#__PURE__*/_jsxDEV(CardsRouter, {\n        deck: deck\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DeckRouter, \"aIBjdx1lK4+n+JpYkR9Jc4ADEJ8=\", false, function () {\n  return [useRouteMatch, useParams, useHistory];\n});\n\n_c = DeckRouter;\nexport default DeckRouter;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckRouter\");","map":{"version":3,"sources":["C:/Users/Ultra/Desktop/Thinkful/flashcard-app-pro/Project_Flashcards_Qualified_1/src/Decks/DeckRouter.js"],"names":["React","useEffect","useState","Route","Switch","useRouteMatch","useParams","useHistory","DeckView","readDeck","updateDeck","deleteDeck","listCards","deleteCard","EditDeck","CardsRouter","Study","BreadcrumbNav","DeckRouter","decks","deleteDeckHandler","console","log","url","initialDeck","name","description","cards","deck","setDeck","navigations","route","id","deckId","history","abortController","AbortController","loadDeck","deckFromAPI","signal","err","abort","editDeckHandle","updatedDeck","newName","newDescription","push","deleteCardHandle","cardId","reply","window","confirm","deleteDeckHandle"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from 'react'\r\nimport {Route, Switch, useRouteMatch, useParams, useHistory} from \"react-router-dom\"\r\nimport DeckView from \"./DeckView/DeckView\"\r\nimport { readDeck, updateDeck, deleteDeck, listCards, deleteCard} from \"../utils/api/index\"\r\nimport EditDeck from \"../Cards/CardsRouter\"\r\nimport CardsRouter from \"../Cards/CardsRouter\"\r\nimport Study from \"./Study/Study\"\r\nimport BreadcrumbNav from \"../Common/BreadcrumbNav\"\r\n\r\nfunction DeckRouter ({decks, deleteDeckHandler}) {\r\n    console.log(deleteDeckHandler)\r\n    const { url } = useRouteMatch()\r\n    const initialDeck = ({name: \"Sample\", description: \"Sample\", cards: []})\r\n    const [deck, setDeck] = useState({...initialDeck})\r\n    const navigations = [\r\n        [{name: \"Home\", route: \"/\"}, {name: deck.name}],\r\n        [{name: \"Home\", route: \"/\"}, {name: deck.name, route: url }, {name: \"Study\"}],\r\n        [{name: \"Home\", route: \"/\"}, {name: deck.name, route: `/decks/${deck.id}`}, {name: \"Edit Deck\"}]\r\n\r\n    ]\r\n    const { deckId } = useParams()\r\n    const history = useHistory()\r\n\r\n\r\n    useEffect(() => {\r\n        setDeck({...initialDeck})\r\n        const abortController = new AbortController();\r\n        async function loadDeck(){\r\n            try{\r\n                const deckFromAPI = await readDeck(deckId, abortController.signal)\r\n                setDeck({...deckFromAPI})\r\n                return deckFromAPI\r\n            } catch(err) {\r\n                if(err.name !== \"AbortError\") {\r\n                    throw err;\r\n                }\r\n            }\r\n        }\r\n        loadDeck()\r\n        return () => abortController.abort()\r\n\r\n    }, [deckId])\r\n\r\n\r\n    const editDeckHandle = async (updatedDeck) => {\r\n        const {newName, newDescription} = await updateDeck(updatedDeck)\r\n        console.log(newName, newDescription);\r\n        history.push(url)\r\n    }\r\n\r\n    const deleteCardHandle = async (cardId) => {\r\n        const reply = window.confirm(\"Are you sure you want to delete this card?\")\r\n        if(reply) {\r\n            await deleteCard(cardId)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Switch>\r\n            <Route exact={true} path={url} >\r\n                <BreadcrumbNav namesRoutes={navigations[0]} />\r\n                <DeckView deck={deck} deleteDeckHandle={deleteDeckHandle} deleteCardHandle={deleteCardHandle} />\r\n\r\n            </Route>\r\n            <Route path={`${url}/study`} >\r\n                <BreadcrumbNav namesRoutes={navigations[2]} />\r\n                <EditDeck deck={deck} update={editDeckHandle}/>\r\n\r\n            </Route>\r\n            <Route path={`${url}/cards`} >\r\n                <CardsRouter deck={deck} />\r\n\r\n            </Route>\r\n        </Switch>\r\n    )\r\n}\r\n\r\n\r\nexport default DeckRouter"]},"metadata":{},"sourceType":"module"}